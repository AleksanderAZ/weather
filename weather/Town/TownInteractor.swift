//
//  TownInteractor.swift
//  weather
//
//  Created Z on 6/11/19.
//  Copyright © 2019 Zyma. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class TownInteractor: TownInteractorProtocol {

    weak var presenter: TownPresenterProtocol?
    
    let townDataBase: TownDataBaseProtocol = TownDataBase()
    
    private var townModel: [TownModel]?
    
    func loadTown(completion: @escaping ([TownModel]?)->()) {
        
        var countResult = 0
        let count = townDataBase.count()
        townModel?.removeAll()
        for index in 0..<count {
            let item = townDataBase.getItem(index: index)
            
            loadTownInfo(nameTown: item) { [weak self] (name: String?, tempr: String?, info: String?) in
                print("-----",item,"--",name," ",tempr)
                self?.townModel?.append(TownModel(name: item, temperature: tempr, townFullInfo: info, typeInfo: false))
                countResult = countResult + 1
                print(countResult, count)
                if countResult >= count {
                    print(self?.townModel)
                    completion(self?.townModel)
                }
            }
        }
        
    }
    
    func getTown(completion: @escaping ([TownModel]?)->()) {
        
        if let townModel = self.townModel {
            completion(townModel)
        }
        else {
            self.townModel = [TownModel]()
            self.loadTown() { [weak self] (towns: [TownModel]?) in
                self?.townModel = towns
                completion(towns)
            }
        }
    }
    
    func addTown(name: String, completion: @escaping ([TownModel]?)->()) {
        
        let itemsTowns = self.townModel?.filter { (item) in
            guard let itemName = item.name else { return false }
            return (name == itemName)
        }
        
        let isTowns = itemsTowns?.count ?? 0
        print(isTowns)
        if  isTowns == 0 {
            townDataBase.addItem(item: name)
            self.loadTown() { [weak self] (towns: [TownModel]?) in
                self?.townModel = towns
                completion(nil)
            }
        }
    }
    
    func loadTownInfo(nameTown: String, completion: @escaping (String?, String?, String?)->()) {
        
        NetworkServiceAPI.shared.weatherAPIRequest(nameTown: nameTown) { [weak self] (result: WeatherAPIModel?) in
            
            guard let result = result else { return }
            
            let name = result.name! + " name"
            let tempr = result.name! + " tempr"
            let info = result.name! + " info"
            
            completion(name, tempr, info)
        }
    }
}
